#! /usr/bin/env perl6

use v6.c;

use Perl6::Utils;
use Perl6::Documentable::Registry;
use Perl6::Documentable::To::HTML;
use Pod::Load;
use Pod::Utilities::Build;

sub MAIN (
    Str  :$topdir         = "doc",
    Bool :v(:verbose($v)) = False,
    Bool :c(:$cache)      = False
) {

    # debug function
    sub DEBUG($msg) {
        say $msg if $v;
    }

    #===================================================================

    DEBUG("Processing phase...");
    my $registry = Perl6::Documentable::Registry.new(use-cache => $cache,
                                                     verbose   => $v
                                                    );
    for <Language Programs Type Native> {
        $registry.process-pod-dir(:topdir($topdir), :dir($_));
    }
    $registry.compose;

    #===================================================================

    DEBUG("Writing html/index.html and html/404.html...");
    spurt 'html/index.html', p2h(load('doc/HomePage.pod6')[0], :pod-path('HomePage.pod6'));
    spurt 'html/404.html', p2h(load('doc/404.pod6')[0], :pod-path('404.pod6'));

    #===================================================================

    DEBUG("HTML generation phase...");
    for <programs language type> -> $kind {
        for $registry.lookup($kind, :by<kind>).list -> $doc {
            DEBUG("Writing $kind document for {$doc.name} ...");
            spurt "html{$doc.url}.html", source-html($kind, $doc);
        }
    }

    #===================================================================

    DEBUG("Index generation phase...");
    
    DEBUG("Writing html/programs.html ...");
    spurt 'html/programs.html', programs-index-html($registry.programs-index);

    DEBUG("Writing html/language.html ...");
    spurt 'html/language.html', language-index-html($registry.language-index);

    DEBUG("Writing html/type.html ...");
    spurt 'html/type.html', type-index-html($registry.type-index);

    DEBUG("Writing html/routine.html ...");
    spurt 'html/routine.html', routine-index-html($registry.routine-index);

    DEBUG("Subindex generation phase...");

    for <basic composite domain-specific exceptions> -> $category {
        DEBUG("Writing html/type-$category.html ...");
        spurt "html/type-$category.html", 
        type-subindex-html($registry.type-subindex(:$category), $category);        
    }

    for <sub method term operator trait submethod> -> $category {
        DEBUG("Writing html/routine-$category.html ...");
        spurt "html/routine-$category.html", 
        routine-subindex-html($registry.routine-subindex(:$category), $category);        
    }
}