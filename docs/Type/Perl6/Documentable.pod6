
=begin pod :kind("type") :subkind("class") :category("basic")

=TITLE class Perl6::Documentable

=SUBTITLE Represents a self-contained Perl 6 documentation element.

    class Perl6::Documentable {}

This class is the base for L<Perl6::Documentable::Primary|/type/Perl6::Documentable::Secondary>
and L<Perl6::Documentable::Derived|/type/Perl6::Documentable::Derived>.

Everything documented is represented by a child class of C<Perl6::Documentable>.

=head1 Methods

=head2 submethod BUILD

Defined as

    submethod BUILD(:$!name, :$!kind!, :@!subkinds, :@!categories, :$!pod!)

Returns a C<Perl6::Documentable> object correctly initialized.

=head2 method name

Defined as

    method name(--> Str)

Returns C<$!name>. Have in mind this value is not unique, so there could be more than one
C<Perl6::Documentable> instance with the same name.

=head2 method kind

Defined as

    method kind(--> Kind)

Returns C<$!kind>. See L<Kind|/type/Kind> to get more info.

=head2 method pod

Defined as

    method pod(--> Pod::Block)

Returns C<$!pod>. C<$!pod> is the documentation represented by this object.

=head2 method subkinds

Defined as

    method subkinds(-->Array[Str])

Returns C<@!subkinds>.

=head2 method categories

Returns C<@!categories>. If C<@!categories> is not defined, C<@!subkinds> will
be returned instead.

=head2 method english-list

Defined as:

    method english-list()

This is a helper method used to convert lists (C<@.subkinds>) to an "english"
format.

=begin code

my $doc = Perl6::Documentable.new(
    kind     => Kind::Type,
    subkinds => ["a", "b"],
    pod      => []
);

say $doc.english-list # OUTPUT: a and b␤»

=end code

=end pod

=begin pod :kind("type") :subkind("enum") :category("basic")

=TITLE enum Kind

=SUBTITLE Information about the origin of a C<Perl6::Documentable> instance.

Defined as:

=begin code

enum Kind is export (Type      => "type"     , Language => "language",
                     Programs  => "programs" , Syntax   => "syntax"  ,
                     Reference => "reference", Routine  => "routine" );

=end code

=table
    Kind::Type Complete pod marked with C<:kind("type")>
    Kind::Language Complete pod marked with C<:kind("language")>
    Kind::Programs Complete pod marked with C<:kind("programs")>
    Kind::Syntax Pod fragment from a complete pod
    Kind::Routine Pod fragment from a complete pod
    Kind::Reference Element generated via "X<>"

You can assign the first three values manually, setting the metadata of a pod section:

=begin code

=begin pod :kind("type") :subkind("class") :category("basic")
(...)
=end pod

=end code

C<Kind::Syntax> and C<Kind::Routine> are automatically assigned by
L<Perl6::Documentable::Primary|/type/Perl6::Documentable::Primary> using
L<Perl6::Documentable::Heading::Grammar|/type/Perl6::Documentable::Heading::Grammar>.

=end pod

=begin pod :kind("type") :subkind("role") :category("basic")

=TITLE role Perl6::Documentable::DocPage

=SUBTITLE Pod to be rendered and its url

Defined as

    class Perl6::Documentable::DocPage

=end pod